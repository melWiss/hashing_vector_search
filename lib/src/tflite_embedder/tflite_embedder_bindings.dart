// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class TFLiteEmbedderBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TFLiteEmbedderBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TFLiteEmbedderBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double strtod(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double strtof(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int strtol(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ffi.Char> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Long)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> initstate(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> setstate(
    ffi.Pointer<ffi.Char> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Char> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Char> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.UnsignedInt> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.UnsignedShort>)>>('erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.UnsignedShort> seed48(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedShort> Function(
              ffi.Pointer<ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedShort> Function(
          ffi.Pointer<ffi.UnsignedShort>)>();

  void lcong48(
    ffi.Pointer<ffi.UnsignedShort> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int nrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>();

  int jrand48_r(
    ffi.Pointer<ffi.UnsignedShort> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Long> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Long>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Long>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Long, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.UnsignedShort> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.UnsignedShort> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedShort>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedShort>, ffi.Pointer<drand48_data>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
  ) {
    return _arc4random_buf(
      __buf,
      __size,
    );
  }

  late final _arc4random_bufPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size)>>(
      'arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<__uint32_t Function(__uint32_t)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Size,
              ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int __status, ffi.Pointer<ffi.Void> __arg)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> mktemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<ffi.Char> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> mkdtemp(
    ffi.Pointer<ffi.Char> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> realpath(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int> __decpt,
    ffi.Pointer<ffi.Int> __sign,
    ffi.Pointer<ffi.Char> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Double,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  int mblen(
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> __pwc,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Char> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> __pwcs,
    ffi.Pointer<ffi.Char> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.WChar> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Char> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Double>, ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<TfLiteOperator> TfLiteOperatorCreate(
    TfLiteBuiltinOperator builtin_code,
    ffi.Pointer<ffi.Char> custom_name,
    int version,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _TfLiteOperatorCreate(
      builtin_code.value,
      custom_name,
      version,
      user_data,
    );
  }

  late final _TfLiteOperatorCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteOperator> Function(
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('TfLiteOperatorCreate');
  late final _TfLiteOperatorCreate = _TfLiteOperatorCreatePtr.asFunction<
      ffi.Pointer<TfLiteOperator> Function(
          int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  void TfLiteOperatorDelete(
    ffi.Pointer<TfLiteOperator> registration,
  ) {
    return _TfLiteOperatorDelete(
      registration,
    );
  }

  late final _TfLiteOperatorDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TfLiteOperator>)>>(
      'TfLiteOperatorDelete');
  late final _TfLiteOperatorDelete = _TfLiteOperatorDeletePtr.asFunction<
      void Function(ffi.Pointer<TfLiteOperator>)>();

  TfLiteBuiltinOperator TfLiteOperatorGetBuiltInCode(
    ffi.Pointer<TfLiteOperator> registration,
  ) {
    return TfLiteBuiltinOperator.fromValue(_TfLiteOperatorGetBuiltInCode(
      registration,
    ));
  }

  late final _TfLiteOperatorGetBuiltInCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TfLiteOperator>)>>('TfLiteOperatorGetBuiltInCode');
  late final _TfLiteOperatorGetBuiltInCode = _TfLiteOperatorGetBuiltInCodePtr
      .asFunction<int Function(ffi.Pointer<TfLiteOperator>)>();

  ffi.Pointer<ffi.Char> TfLiteOperatorGetCustomName(
    ffi.Pointer<TfLiteOperator> registration,
  ) {
    return _TfLiteOperatorGetCustomName(
      registration,
    );
  }

  late final _TfLiteOperatorGetCustomNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TfLiteOperator>)>>('TfLiteOperatorGetCustomName');
  late final _TfLiteOperatorGetCustomName =
      _TfLiteOperatorGetCustomNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TfLiteOperator>)>();

  int TfLiteOperatorGetVersion(
    ffi.Pointer<TfLiteOperator> registration,
  ) {
    return _TfLiteOperatorGetVersion(
      registration,
    );
  }

  late final _TfLiteOperatorGetVersionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<TfLiteOperator>)>>(
      'TfLiteOperatorGetVersion');
  late final _TfLiteOperatorGetVersion = _TfLiteOperatorGetVersionPtr
      .asFunction<int Function(ffi.Pointer<TfLiteOperator>)>();

  ffi.Pointer<ffi.Void> TfLiteOperatorGetUserData(
    ffi.Pointer<TfLiteOperator> registration,
  ) {
    return _TfLiteOperatorGetUserData(
      registration,
    );
  }

  late final _TfLiteOperatorGetUserDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<TfLiteOperator>)>>('TfLiteOperatorGetUserData');
  late final _TfLiteOperatorGetUserData =
      _TfLiteOperatorGetUserDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<TfLiteOperator>)>();

  void TfLiteOperatorSetInit(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<ffi.Char> buffer,
                    ffi.Size length)>>
        init,
  ) {
    return _TfLiteOperatorSetInit(
      registration,
      init,
    );
  }

  late final _TfLiteOperatorSetInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<ffi.Char> buffer,
                          ffi.Size length)>>)>>('TfLiteOperatorSetInit');
  late final _TfLiteOperatorSetInit = _TfLiteOperatorSetInitPtr.asFunction<
      void Function(
          ffi.Pointer<TfLiteOperator>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<TfLiteOpaqueContext> context,
                      ffi.Pointer<ffi.Char> buffer,
                      ffi.Size length)>>)>();

  TfLiteStatus TfLiteOperatorSetInitWithData(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<ffi.Char> buffer,
                    ffi.Size length)>>
        init,
  ) {
    return TfLiteStatus.fromValue(_TfLiteOperatorSetInitWithData(
      registration,
      init,
    ));
  }

  late final _TfLiteOperatorSetInitWithDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<ffi.Void> Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<ffi.Char> buffer,
                              ffi.Size length)>>)>>(
      'TfLiteOperatorSetInitWithData');
  late final _TfLiteOperatorSetInitWithData =
      _TfLiteOperatorSetInitWithDataPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<ffi.Char> buffer,
                          ffi.Size length)>>)>();

  void TfLiteOperatorSetFree(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<ffi.Void> data)>>
        free,
  ) {
    return _TfLiteOperatorSetFree(
      registration,
      free,
    );
  }

  late final _TfLiteOperatorSetFreePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<ffi.Void> data)>>)>>(
      'TfLiteOperatorSetFree');
  late final _TfLiteOperatorSetFree = _TfLiteOperatorSetFreePtr.asFunction<
      void Function(
          ffi.Pointer<TfLiteOperator>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<TfLiteOpaqueContext> context,
                      ffi.Pointer<ffi.Void> data)>>)>();

  TfLiteStatus TfLiteOperatorSetFreeWithData(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<ffi.Void> data)>>
        free,
  ) {
    return TfLiteStatus.fromValue(_TfLiteOperatorSetFreeWithData(
      registration,
      free,
    ));
  }

  late final _TfLiteOperatorSetFreeWithDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<ffi.Void> data)>>)>>(
      'TfLiteOperatorSetFreeWithData');
  late final _TfLiteOperatorSetFreeWithData =
      _TfLiteOperatorSetFreeWithDataPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<ffi.Void> data)>>)>();

  void TfLiteOperatorSetPrepare(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedInt Function(
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<TfLiteOpaqueNode> node)>>
        prepare,
  ) {
    return _TfLiteOperatorSetPrepare(
      registration,
      prepare,
    );
  }

  late final _TfLiteOperatorSetPreparePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedInt Function(
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<TfLiteOpaqueNode> node)>>)>>(
      'TfLiteOperatorSetPrepare');
  late final _TfLiteOperatorSetPrepare =
      _TfLiteOperatorSetPreparePtr.asFunction<
          void Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedInt Function(
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<TfLiteOpaqueNode> node)>>)>();

  TfLiteStatus TfLiteOperatorSetPrepareWithData(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedInt Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<TfLiteOpaqueNode> node)>>
        prepare,
  ) {
    return TfLiteStatus.fromValue(_TfLiteOperatorSetPrepareWithData(
      registration,
      prepare,
    ));
  }

  late final _TfLiteOperatorSetPrepareWithDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedInt Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<TfLiteOpaqueNode> node)>>)>>(
      'TfLiteOperatorSetPrepareWithData');
  late final _TfLiteOperatorSetPrepareWithData =
      _TfLiteOperatorSetPrepareWithDataPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedInt Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<TfLiteOpaqueNode> node)>>)>();

  void TfLiteOperatorSetInvoke(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedInt Function(
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<TfLiteOpaqueNode> node)>>
        invoke,
  ) {
    return _TfLiteOperatorSetInvoke(
      registration,
      invoke,
    );
  }

  late final _TfLiteOperatorSetInvokePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedInt Function(
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<TfLiteOpaqueNode> node)>>)>>(
      'TfLiteOperatorSetInvoke');
  late final _TfLiteOperatorSetInvoke = _TfLiteOperatorSetInvokePtr.asFunction<
      void Function(
          ffi.Pointer<TfLiteOperator>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.UnsignedInt Function(
                      ffi.Pointer<TfLiteOpaqueContext> context,
                      ffi.Pointer<TfLiteOpaqueNode> node)>>)>();

  TfLiteStatus TfLiteOperatorSetInvokeWithData(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.UnsignedInt Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<TfLiteOpaqueNode> node)>>
        invoke,
  ) {
    return TfLiteStatus.fromValue(_TfLiteOperatorSetInvokeWithData(
      registration,
      invoke,
    ));
  }

  late final _TfLiteOperatorSetInvokeWithDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.UnsignedInt Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<TfLiteOpaqueNode> node)>>)>>(
      'TfLiteOperatorSetInvokeWithData');
  late final _TfLiteOperatorSetInvokeWithData =
      _TfLiteOperatorSetInvokeWithDataPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.UnsignedInt Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<TfLiteOpaqueNode> node)>>)>();

  void TfLiteOperatorSetAsyncKernel(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<TfLiteAsyncKernel> Function(
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<TfLiteOpaqueNode> node)>>
        async_kernel,
  ) {
    return _TfLiteOperatorSetAsyncKernel(
      registration,
      async_kernel,
    );
  }

  late final _TfLiteOperatorSetAsyncKernelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<TfLiteAsyncKernel> Function(
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<TfLiteOpaqueNode> node)>>)>>(
      'TfLiteOperatorSetAsyncKernel');
  late final _TfLiteOperatorSetAsyncKernel =
      _TfLiteOperatorSetAsyncKernelPtr.asFunction<
          void Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<TfLiteAsyncKernel> Function(
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<TfLiteOpaqueNode> node)>>)>();

  TfLiteStatus TfLiteOperatorSetAsyncKernelWithData(
    ffi.Pointer<TfLiteOperator> registration,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<TfLiteAsyncKernel> Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<TfLiteOpaqueContext> context,
                    ffi.Pointer<TfLiteOpaqueNode> node)>>
        async_kernel,
  ) {
    return TfLiteStatus.fromValue(_TfLiteOperatorSetAsyncKernelWithData(
      registration,
      async_kernel,
    ));
  }

  late final _TfLiteOperatorSetAsyncKernelWithDataPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<TfLiteOperator>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<TfLiteAsyncKernel> Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<TfLiteOpaqueContext> context,
                              ffi.Pointer<TfLiteOpaqueNode> node)>>)>>(
      'TfLiteOperatorSetAsyncKernelWithData');
  late final _TfLiteOperatorSetAsyncKernelWithData =
      _TfLiteOperatorSetAsyncKernelWithDataPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteOperator>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<TfLiteAsyncKernel> Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<TfLiteOpaqueContext> context,
                          ffi.Pointer<TfLiteOpaqueNode> node)>>)>();

  void TfLiteOperatorSetInplaceOperator(
    ffi.Pointer<TfLiteOperator> registration,
    int inplace_operator,
  ) {
    return _TfLiteOperatorSetInplaceOperator(
      registration,
      inplace_operator,
    );
  }

  late final _TfLiteOperatorSetInplaceOperatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TfLiteOperator>,
              ffi.Uint64)>>('TfLiteOperatorSetInplaceOperator');
  late final _TfLiteOperatorSetInplaceOperator =
      _TfLiteOperatorSetInplaceOperatorPtr.asFunction<
          void Function(ffi.Pointer<TfLiteOperator>, int)>();

  ffi.Pointer<ffi.Char> TfLiteVersion() {
    return _TfLiteVersion();
  }

  late final _TfLiteVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TfLiteVersion');
  late final _TfLiteVersion =
      _TfLiteVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> TfLiteExtensionApisVersion() {
    return _TfLiteExtensionApisVersion();
  }

  late final _TfLiteExtensionApisVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'TfLiteExtensionApisVersion');
  late final _TfLiteExtensionApisVersion = _TfLiteExtensionApisVersionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  int TfLiteSchemaVersion() {
    return _TfLiteSchemaVersion();
  }

  late final _TfLiteSchemaVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('TfLiteSchemaVersion');
  late final _TfLiteSchemaVersion =
      _TfLiteSchemaVersionPtr.asFunction<int Function()>();

  ffi.Pointer<TfLiteModel> TfLiteModelCreate(
    ffi.Pointer<ffi.Void> model_data,
    int model_size,
  ) {
    return _TfLiteModelCreate(
      model_data,
      model_size,
    );
  }

  late final _TfLiteModelCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteModel> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('TfLiteModelCreate');
  late final _TfLiteModelCreate = _TfLiteModelCreatePtr.asFunction<
      ffi.Pointer<TfLiteModel> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<TfLiteModel> TfLiteModelCreateWithErrorReporter(
    ffi.Pointer<ffi.Void> model_data,
    int model_size,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<ffi.Char> format,
                    ffi.Pointer<__va_list_tag> args)>>
        reporter,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _TfLiteModelCreateWithErrorReporter(
      model_data,
      model_size,
      reporter,
      user_data,
    );
  }

  late final _TfLiteModelCreateWithErrorReporterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteModel> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<ffi.Char> format,
                          ffi.Pointer<__va_list_tag> args)>>,
              ffi.Pointer<ffi.Void>)>>('TfLiteModelCreateWithErrorReporter');
  late final _TfLiteModelCreateWithErrorReporter =
      _TfLiteModelCreateWithErrorReporterPtr.asFunction<
          ffi.Pointer<TfLiteModel> Function(
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<ffi.Char> format,
                          ffi.Pointer<__va_list_tag> args)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<TfLiteModel> TfLiteModelCreateFromFile(
    ffi.Pointer<ffi.Char> model_path,
  ) {
    return _TfLiteModelCreateFromFile(
      model_path,
    );
  }

  late final _TfLiteModelCreateFromFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteModel> Function(
              ffi.Pointer<ffi.Char>)>>('TfLiteModelCreateFromFile');
  late final _TfLiteModelCreateFromFile = _TfLiteModelCreateFromFilePtr
      .asFunction<ffi.Pointer<TfLiteModel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TfLiteModel> TfLiteModelCreateFromFileWithErrorReporter(
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<ffi.Char> format,
                    ffi.Pointer<__va_list_tag> args)>>
        reporter,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _TfLiteModelCreateFromFileWithErrorReporter(
      model_path,
      reporter,
      user_data,
    );
  }

  late final _TfLiteModelCreateFromFileWithErrorReporterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TfLiteModel> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<ffi.Char> format,
                              ffi.Pointer<__va_list_tag> args)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'TfLiteModelCreateFromFileWithErrorReporter');
  late final _TfLiteModelCreateFromFileWithErrorReporter =
      _TfLiteModelCreateFromFileWithErrorReporterPtr.asFunction<
          ffi.Pointer<TfLiteModel> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<ffi.Char> format,
                          ffi.Pointer<__va_list_tag> args)>>,
              ffi.Pointer<ffi.Void>)>();

  void TfLiteModelDelete(
    ffi.Pointer<TfLiteModel> model,
  ) {
    return _TfLiteModelDelete(
      model,
    );
  }

  late final _TfLiteModelDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TfLiteModel>)>>(
          'TfLiteModelDelete');
  late final _TfLiteModelDelete = _TfLiteModelDeletePtr.asFunction<
      void Function(ffi.Pointer<TfLiteModel>)>();

  ffi.Pointer<TfLiteInterpreterOptions> TfLiteInterpreterOptionsCreate() {
    return _TfLiteInterpreterOptionsCreate();
  }

  late final _TfLiteInterpreterOptionsCreatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<TfLiteInterpreterOptions> Function()>>(
      'TfLiteInterpreterOptionsCreate');
  late final _TfLiteInterpreterOptionsCreate =
      _TfLiteInterpreterOptionsCreatePtr.asFunction<
          ffi.Pointer<TfLiteInterpreterOptions> Function()>();

  ffi.Pointer<TfLiteInterpreterOptions> TfLiteInterpreterOptionsCopy(
    ffi.Pointer<TfLiteInterpreterOptions> from,
  ) {
    return _TfLiteInterpreterOptionsCopy(
      from,
    );
  }

  late final _TfLiteInterpreterOptionsCopyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TfLiteInterpreterOptions> Function(
                  ffi.Pointer<TfLiteInterpreterOptions>)>>(
      'TfLiteInterpreterOptionsCopy');
  late final _TfLiteInterpreterOptionsCopy =
      _TfLiteInterpreterOptionsCopyPtr.asFunction<
          ffi.Pointer<TfLiteInterpreterOptions> Function(
              ffi.Pointer<TfLiteInterpreterOptions>)>();

  void TfLiteInterpreterOptionsDelete(
    ffi.Pointer<TfLiteInterpreterOptions> options,
  ) {
    return _TfLiteInterpreterOptionsDelete(
      options,
    );
  }

  late final _TfLiteInterpreterOptionsDeletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<TfLiteInterpreterOptions>)>>(
      'TfLiteInterpreterOptionsDelete');
  late final _TfLiteInterpreterOptionsDelete =
      _TfLiteInterpreterOptionsDeletePtr.asFunction<
          void Function(ffi.Pointer<TfLiteInterpreterOptions>)>();

  void TfLiteInterpreterOptionsSetNumThreads(
    ffi.Pointer<TfLiteInterpreterOptions> options,
    int num_threads,
  ) {
    return _TfLiteInterpreterOptionsSetNumThreads(
      options,
      num_threads,
    );
  }

  late final _TfLiteInterpreterOptionsSetNumThreadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TfLiteInterpreterOptions>,
              ffi.Int32)>>('TfLiteInterpreterOptionsSetNumThreads');
  late final _TfLiteInterpreterOptionsSetNumThreads =
      _TfLiteInterpreterOptionsSetNumThreadsPtr.asFunction<
          void Function(ffi.Pointer<TfLiteInterpreterOptions>, int)>();

  void TfLiteInterpreterOptionsAddDelegate(
    ffi.Pointer<TfLiteInterpreterOptions> options,
    ffi.Pointer<TfLiteOpaqueDelegate> delegate,
  ) {
    return _TfLiteInterpreterOptionsAddDelegate(
      options,
      delegate,
    );
  }

  late final _TfLiteInterpreterOptionsAddDelegatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<TfLiteInterpreterOptions>,
                  ffi.Pointer<TfLiteOpaqueDelegate>)>>(
      'TfLiteInterpreterOptionsAddDelegate');
  late final _TfLiteInterpreterOptionsAddDelegate =
      _TfLiteInterpreterOptionsAddDelegatePtr.asFunction<
          void Function(ffi.Pointer<TfLiteInterpreterOptions>,
              ffi.Pointer<TfLiteOpaqueDelegate>)>();

  void TfLiteInterpreterOptionsSetErrorReporter(
    ffi.Pointer<TfLiteInterpreterOptions> options,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<ffi.Void> user_data,
                    ffi.Pointer<ffi.Char> format,
                    ffi.Pointer<__va_list_tag> args)>>
        reporter,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _TfLiteInterpreterOptionsSetErrorReporter(
      options,
      reporter,
      user_data,
    );
  }

  late final _TfLiteInterpreterOptionsSetErrorReporterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<TfLiteInterpreterOptions>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<ffi.Void> user_data,
                              ffi.Pointer<ffi.Char> format,
                              ffi.Pointer<__va_list_tag> args)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'TfLiteInterpreterOptionsSetErrorReporter');
  late final _TfLiteInterpreterOptionsSetErrorReporter =
      _TfLiteInterpreterOptionsSetErrorReporterPtr.asFunction<
          void Function(
              ffi.Pointer<TfLiteInterpreterOptions>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void> user_data,
                          ffi.Pointer<ffi.Char> format,
                          ffi.Pointer<__va_list_tag> args)>>,
              ffi.Pointer<ffi.Void>)>();

  void TfLiteInterpreterOptionsAddOperator(
    ffi.Pointer<TfLiteInterpreterOptions> options,
    ffi.Pointer<TfLiteOperator> registration,
  ) {
    return _TfLiteInterpreterOptionsAddOperator(
      options,
      registration,
    );
  }

  late final _TfLiteInterpreterOptionsAddOperatorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<TfLiteInterpreterOptions>,
                  ffi.Pointer<TfLiteOperator>)>>(
      'TfLiteInterpreterOptionsAddOperator');
  late final _TfLiteInterpreterOptionsAddOperator =
      _TfLiteInterpreterOptionsAddOperatorPtr.asFunction<
          void Function(ffi.Pointer<TfLiteInterpreterOptions>,
              ffi.Pointer<TfLiteOperator>)>();

  TfLiteStatus TfLiteInterpreterOptionsEnableCancellation(
    ffi.Pointer<TfLiteInterpreterOptions> options,
    bool enable,
  ) {
    return TfLiteStatus.fromValue(_TfLiteInterpreterOptionsEnableCancellation(
      options,
      enable,
    ));
  }

  late final _TfLiteInterpreterOptionsEnableCancellationPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TfLiteInterpreterOptions>,
              ffi.Bool)>>('TfLiteInterpreterOptionsEnableCancellation');
  late final _TfLiteInterpreterOptionsEnableCancellation =
      _TfLiteInterpreterOptionsEnableCancellationPtr.asFunction<
          int Function(ffi.Pointer<TfLiteInterpreterOptions>, bool)>();

  ffi.Pointer<TfLiteInterpreter> TfLiteInterpreterCreate(
    ffi.Pointer<TfLiteModel> model,
    ffi.Pointer<TfLiteInterpreterOptions> optional_options,
  ) {
    return _TfLiteInterpreterCreate(
      model,
      optional_options,
    );
  }

  late final _TfLiteInterpreterCreatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TfLiteInterpreter> Function(ffi.Pointer<TfLiteModel>,
                  ffi.Pointer<TfLiteInterpreterOptions>)>>(
      'TfLiteInterpreterCreate');
  late final _TfLiteInterpreterCreate = _TfLiteInterpreterCreatePtr.asFunction<
      ffi.Pointer<TfLiteInterpreter> Function(
          ffi.Pointer<TfLiteModel>, ffi.Pointer<TfLiteInterpreterOptions>)>();

  void TfLiteInterpreterDelete(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return _TfLiteInterpreterDelete(
      interpreter,
    );
  }

  late final _TfLiteInterpreterDeletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterDelete');
  late final _TfLiteInterpreterDelete = _TfLiteInterpreterDeletePtr.asFunction<
      void Function(ffi.Pointer<TfLiteInterpreter>)>();

  int TfLiteInterpreterGetInputTensorCount(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return _TfLiteInterpreterGetInputTensorCount(
      interpreter,
    );
  }

  late final _TfLiteInterpreterGetInputTensorCountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterGetInputTensorCount');
  late final _TfLiteInterpreterGetInputTensorCount =
      _TfLiteInterpreterGetInputTensorCountPtr.asFunction<
          int Function(ffi.Pointer<TfLiteInterpreter>)>();

  ffi.Pointer<ffi.Int> TfLiteInterpreterInputTensorIndices(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return _TfLiteInterpreterInputTensorIndices(
      interpreter,
    );
  }

  late final _TfLiteInterpreterInputTensorIndicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int> Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterInputTensorIndices');
  late final _TfLiteInterpreterInputTensorIndices =
      _TfLiteInterpreterInputTensorIndicesPtr.asFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<TfLiteInterpreter>)>();

  ffi.Pointer<TfLiteTensor> TfLiteInterpreterGetInputTensor(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    int input_index,
  ) {
    return _TfLiteInterpreterGetInputTensor(
      interpreter,
      input_index,
    );
  }

  late final _TfLiteInterpreterGetInputTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteTensor> Function(ffi.Pointer<TfLiteInterpreter>,
              ffi.Int32)>>('TfLiteInterpreterGetInputTensor');
  late final _TfLiteInterpreterGetInputTensor =
      _TfLiteInterpreterGetInputTensorPtr.asFunction<
          ffi.Pointer<TfLiteTensor> Function(
              ffi.Pointer<TfLiteInterpreter>, int)>();

  TfLiteStatus TfLiteInterpreterResizeInputTensor(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    int input_index,
    ffi.Pointer<ffi.Int> input_dims,
    int input_dims_size,
  ) {
    return TfLiteStatus.fromValue(_TfLiteInterpreterResizeInputTensor(
      interpreter,
      input_index,
      input_dims,
      input_dims_size,
    ));
  }

  late final _TfLiteInterpreterResizeInputTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TfLiteInterpreter>,
              ffi.Int32,
              ffi.Pointer<ffi.Int>,
              ffi.Int32)>>('TfLiteInterpreterResizeInputTensor');
  late final _TfLiteInterpreterResizeInputTensor =
      _TfLiteInterpreterResizeInputTensorPtr.asFunction<
          int Function(ffi.Pointer<TfLiteInterpreter>, int,
              ffi.Pointer<ffi.Int>, int)>();

  TfLiteStatus TfLiteInterpreterAllocateTensors(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return TfLiteStatus.fromValue(_TfLiteInterpreterAllocateTensors(
      interpreter,
    ));
  }

  late final _TfLiteInterpreterAllocateTensorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterAllocateTensors');
  late final _TfLiteInterpreterAllocateTensors =
      _TfLiteInterpreterAllocateTensorsPtr.asFunction<
          int Function(ffi.Pointer<TfLiteInterpreter>)>();

  TfLiteStatus TfLiteInterpreterInvoke(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return TfLiteStatus.fromValue(_TfLiteInterpreterInvoke(
      interpreter,
    ));
  }

  late final _TfLiteInterpreterInvokePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TfLiteInterpreter>)>>('TfLiteInterpreterInvoke');
  late final _TfLiteInterpreterInvoke = _TfLiteInterpreterInvokePtr.asFunction<
      int Function(ffi.Pointer<TfLiteInterpreter>)>();

  int TfLiteInterpreterGetOutputTensorCount(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return _TfLiteInterpreterGetOutputTensorCount(
      interpreter,
    );
  }

  late final _TfLiteInterpreterGetOutputTensorCountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterGetOutputTensorCount');
  late final _TfLiteInterpreterGetOutputTensorCount =
      _TfLiteInterpreterGetOutputTensorCountPtr.asFunction<
          int Function(ffi.Pointer<TfLiteInterpreter>)>();

  ffi.Pointer<ffi.Int> TfLiteInterpreterOutputTensorIndices(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return _TfLiteInterpreterOutputTensorIndices(
      interpreter,
    );
  }

  late final _TfLiteInterpreterOutputTensorIndicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int> Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterOutputTensorIndices');
  late final _TfLiteInterpreterOutputTensorIndices =
      _TfLiteInterpreterOutputTensorIndicesPtr.asFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<TfLiteInterpreter>)>();

  ffi.Pointer<TfLiteTensor> TfLiteInterpreterGetOutputTensor(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    int output_index,
  ) {
    return _TfLiteInterpreterGetOutputTensor(
      interpreter,
      output_index,
    );
  }

  late final _TfLiteInterpreterGetOutputTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteTensor> Function(ffi.Pointer<TfLiteInterpreter>,
              ffi.Int32)>>('TfLiteInterpreterGetOutputTensor');
  late final _TfLiteInterpreterGetOutputTensor =
      _TfLiteInterpreterGetOutputTensorPtr.asFunction<
          ffi.Pointer<TfLiteTensor> Function(
              ffi.Pointer<TfLiteInterpreter>, int)>();

  ffi.Pointer<TfLiteTensor> TfLiteInterpreterGetTensor(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    int index,
  ) {
    return _TfLiteInterpreterGetTensor(
      interpreter,
      index,
    );
  }

  late final _TfLiteInterpreterGetTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteTensor> Function(ffi.Pointer<TfLiteInterpreter>,
              ffi.Int)>>('TfLiteInterpreterGetTensor');
  late final _TfLiteInterpreterGetTensor =
      _TfLiteInterpreterGetTensorPtr.asFunction<
          ffi.Pointer<TfLiteTensor> Function(
              ffi.Pointer<TfLiteInterpreter>, int)>();

  TfLiteStatus TfLiteInterpreterCancel(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return TfLiteStatus.fromValue(_TfLiteInterpreterCancel(
      interpreter,
    ));
  }

  late final _TfLiteInterpreterCancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TfLiteInterpreter>)>>('TfLiteInterpreterCancel');
  late final _TfLiteInterpreterCancel = _TfLiteInterpreterCancelPtr.asFunction<
      int Function(ffi.Pointer<TfLiteInterpreter>)>();

  int TfLiteInterpreterGetSignatureCount(
    ffi.Pointer<TfLiteInterpreter> interpreter,
  ) {
    return _TfLiteInterpreterGetSignatureCount(
      interpreter,
    );
  }

  late final _TfLiteInterpreterGetSignatureCountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<TfLiteInterpreter>)>>(
      'TfLiteInterpreterGetSignatureCount');
  late final _TfLiteInterpreterGetSignatureCount =
      _TfLiteInterpreterGetSignatureCountPtr.asFunction<
          int Function(ffi.Pointer<TfLiteInterpreter>)>();

  ffi.Pointer<ffi.Char> TfLiteInterpreterGetSignatureKey(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    int signature_index,
  ) {
    return _TfLiteInterpreterGetSignatureKey(
      interpreter,
      signature_index,
    );
  }

  late final _TfLiteInterpreterGetSignatureKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TfLiteInterpreter>,
              ffi.Int32)>>('TfLiteInterpreterGetSignatureKey');
  late final _TfLiteInterpreterGetSignatureKey =
      _TfLiteInterpreterGetSignatureKeyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TfLiteInterpreter>, int)>();

  ffi.Pointer<TfLiteSignatureRunner> TfLiteInterpreterGetSignatureRunner(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    ffi.Pointer<ffi.Char> signature_key,
  ) {
    return _TfLiteInterpreterGetSignatureRunner(
      interpreter,
      signature_key,
    );
  }

  late final _TfLiteInterpreterGetSignatureRunnerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteSignatureRunner> Function(
              ffi.Pointer<TfLiteInterpreter>,
              ffi.Pointer<ffi.Char>)>>('TfLiteInterpreterGetSignatureRunner');
  late final _TfLiteInterpreterGetSignatureRunner =
      _TfLiteInterpreterGetSignatureRunnerPtr.asFunction<
          ffi.Pointer<TfLiteSignatureRunner> Function(
              ffi.Pointer<TfLiteInterpreter>, ffi.Pointer<ffi.Char>)>();

  int TfLiteSignatureRunnerGetInputCount(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
  ) {
    return _TfLiteSignatureRunnerGetInputCount(
      signature_runner,
    );
  }

  late final _TfLiteSignatureRunnerGetInputCountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<TfLiteSignatureRunner>)>>(
      'TfLiteSignatureRunnerGetInputCount');
  late final _TfLiteSignatureRunnerGetInputCount =
      _TfLiteSignatureRunnerGetInputCountPtr.asFunction<
          int Function(ffi.Pointer<TfLiteSignatureRunner>)>();

  ffi.Pointer<ffi.Char> TfLiteSignatureRunnerGetInputName(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
    int input_index,
  ) {
    return _TfLiteSignatureRunnerGetInputName(
      signature_runner,
      input_index,
    );
  }

  late final _TfLiteSignatureRunnerGetInputNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TfLiteSignatureRunner>,
              ffi.Int32)>>('TfLiteSignatureRunnerGetInputName');
  late final _TfLiteSignatureRunnerGetInputName =
      _TfLiteSignatureRunnerGetInputNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TfLiteSignatureRunner>, int)>();

  TfLiteStatus TfLiteSignatureRunnerResizeInputTensor(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
    ffi.Pointer<ffi.Char> input_name,
    ffi.Pointer<ffi.Int> input_dims,
    int input_dims_size,
  ) {
    return TfLiteStatus.fromValue(_TfLiteSignatureRunnerResizeInputTensor(
      signature_runner,
      input_name,
      input_dims,
      input_dims_size,
    ));
  }

  late final _TfLiteSignatureRunnerResizeInputTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TfLiteSignatureRunner>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int32)>>('TfLiteSignatureRunnerResizeInputTensor');
  late final _TfLiteSignatureRunnerResizeInputTensor =
      _TfLiteSignatureRunnerResizeInputTensorPtr.asFunction<
          int Function(ffi.Pointer<TfLiteSignatureRunner>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  TfLiteStatus TfLiteSignatureRunnerAllocateTensors(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
  ) {
    return TfLiteStatus.fromValue(_TfLiteSignatureRunnerAllocateTensors(
      signature_runner,
    ));
  }

  late final _TfLiteSignatureRunnerAllocateTensorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<TfLiteSignatureRunner>)>>(
      'TfLiteSignatureRunnerAllocateTensors');
  late final _TfLiteSignatureRunnerAllocateTensors =
      _TfLiteSignatureRunnerAllocateTensorsPtr.asFunction<
          int Function(ffi.Pointer<TfLiteSignatureRunner>)>();

  ffi.Pointer<TfLiteTensor> TfLiteSignatureRunnerGetInputTensor(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
    ffi.Pointer<ffi.Char> input_name,
  ) {
    return _TfLiteSignatureRunnerGetInputTensor(
      signature_runner,
      input_name,
    );
  }

  late final _TfLiteSignatureRunnerGetInputTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteTensor> Function(ffi.Pointer<TfLiteSignatureRunner>,
              ffi.Pointer<ffi.Char>)>>('TfLiteSignatureRunnerGetInputTensor');
  late final _TfLiteSignatureRunnerGetInputTensor =
      _TfLiteSignatureRunnerGetInputTensorPtr.asFunction<
          ffi.Pointer<TfLiteTensor> Function(
              ffi.Pointer<TfLiteSignatureRunner>, ffi.Pointer<ffi.Char>)>();

  TfLiteStatus TfLiteSignatureRunnerInvoke(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
  ) {
    return TfLiteStatus.fromValue(_TfLiteSignatureRunnerInvoke(
      signature_runner,
    ));
  }

  late final _TfLiteSignatureRunnerInvokePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<TfLiteSignatureRunner>)>>(
      'TfLiteSignatureRunnerInvoke');
  late final _TfLiteSignatureRunnerInvoke = _TfLiteSignatureRunnerInvokePtr
      .asFunction<int Function(ffi.Pointer<TfLiteSignatureRunner>)>();

  int TfLiteSignatureRunnerGetOutputCount(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
  ) {
    return _TfLiteSignatureRunnerGetOutputCount(
      signature_runner,
    );
  }

  late final _TfLiteSignatureRunnerGetOutputCountPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<TfLiteSignatureRunner>)>>(
      'TfLiteSignatureRunnerGetOutputCount');
  late final _TfLiteSignatureRunnerGetOutputCount =
      _TfLiteSignatureRunnerGetOutputCountPtr.asFunction<
          int Function(ffi.Pointer<TfLiteSignatureRunner>)>();

  ffi.Pointer<ffi.Char> TfLiteSignatureRunnerGetOutputName(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
    int output_index,
  ) {
    return _TfLiteSignatureRunnerGetOutputName(
      signature_runner,
      output_index,
    );
  }

  late final _TfLiteSignatureRunnerGetOutputNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TfLiteSignatureRunner>,
              ffi.Int32)>>('TfLiteSignatureRunnerGetOutputName');
  late final _TfLiteSignatureRunnerGetOutputName =
      _TfLiteSignatureRunnerGetOutputNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TfLiteSignatureRunner>, int)>();

  ffi.Pointer<TfLiteTensor> TfLiteSignatureRunnerGetOutputTensor(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
    ffi.Pointer<ffi.Char> output_name,
  ) {
    return _TfLiteSignatureRunnerGetOutputTensor(
      signature_runner,
      output_name,
    );
  }

  late final _TfLiteSignatureRunnerGetOutputTensorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteTensor> Function(ffi.Pointer<TfLiteSignatureRunner>,
              ffi.Pointer<ffi.Char>)>>('TfLiteSignatureRunnerGetOutputTensor');
  late final _TfLiteSignatureRunnerGetOutputTensor =
      _TfLiteSignatureRunnerGetOutputTensorPtr.asFunction<
          ffi.Pointer<TfLiteTensor> Function(
              ffi.Pointer<TfLiteSignatureRunner>, ffi.Pointer<ffi.Char>)>();

  TfLiteType TfLiteTensorType(
    ffi.Pointer<TfLiteTensor> tensor,
  ) {
    return TfLiteType.fromValue(_TfLiteTensorType(
      tensor,
    ));
  }

  late final _TfLiteTensorTypePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TfLiteTensor>)>>(
      'TfLiteTensorType');
  late final _TfLiteTensorType = _TfLiteTensorTypePtr.asFunction<
      int Function(ffi.Pointer<TfLiteTensor>)>();

  int TfLiteTensorNumDims(
    ffi.Pointer<TfLiteTensor> tensor,
  ) {
    return _TfLiteTensorNumDims(
      tensor,
    );
  }

  late final _TfLiteTensorNumDimsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<TfLiteTensor>)>>(
      'TfLiteTensorNumDims');
  late final _TfLiteTensorNumDims = _TfLiteTensorNumDimsPtr.asFunction<
      int Function(ffi.Pointer<TfLiteTensor>)>();

  int TfLiteTensorDim(
    ffi.Pointer<TfLiteTensor> tensor,
    int dim_index,
  ) {
    return _TfLiteTensorDim(
      tensor,
      dim_index,
    );
  }

  late final _TfLiteTensorDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<TfLiteTensor>, ffi.Int32)>>('TfLiteTensorDim');
  late final _TfLiteTensorDim = _TfLiteTensorDimPtr.asFunction<
      int Function(ffi.Pointer<TfLiteTensor>, int)>();

  int TfLiteTensorByteSize(
    ffi.Pointer<TfLiteTensor> tensor,
  ) {
    return _TfLiteTensorByteSize(
      tensor,
    );
  }

  late final _TfLiteTensorByteSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<TfLiteTensor>)>>(
          'TfLiteTensorByteSize');
  late final _TfLiteTensorByteSize = _TfLiteTensorByteSizePtr.asFunction<
      int Function(ffi.Pointer<TfLiteTensor>)>();

  ffi.Pointer<ffi.Void> TfLiteTensorData(
    ffi.Pointer<TfLiteTensor> tensor,
  ) {
    return _TfLiteTensorData(
      tensor,
    );
  }

  late final _TfLiteTensorDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<TfLiteTensor>)>>('TfLiteTensorData');
  late final _TfLiteTensorData = _TfLiteTensorDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<TfLiteTensor>)>();

  ffi.Pointer<ffi.Char> TfLiteTensorName(
    ffi.Pointer<TfLiteTensor> tensor,
  ) {
    return _TfLiteTensorName(
      tensor,
    );
  }

  late final _TfLiteTensorNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TfLiteTensor>)>>('TfLiteTensorName');
  late final _TfLiteTensorName = _TfLiteTensorNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TfLiteTensor>)>();

  TfLiteQuantizationParams TfLiteTensorQuantizationParams(
    ffi.Pointer<TfLiteTensor> tensor,
  ) {
    return _TfLiteTensorQuantizationParams(
      tensor,
    );
  }

  late final _TfLiteTensorQuantizationParamsPtr = _lookup<
      ffi.NativeFunction<
          TfLiteQuantizationParams Function(
              ffi.Pointer<TfLiteTensor>)>>('TfLiteTensorQuantizationParams');
  late final _TfLiteTensorQuantizationParams =
      _TfLiteTensorQuantizationParamsPtr.asFunction<
          TfLiteQuantizationParams Function(ffi.Pointer<TfLiteTensor>)>();

  TfLiteStatus TfLiteTensorCopyFromBuffer(
    ffi.Pointer<TfLiteTensor> tensor,
    ffi.Pointer<ffi.Void> input_data,
    int input_data_size,
  ) {
    return TfLiteStatus.fromValue(_TfLiteTensorCopyFromBuffer(
      tensor,
      input_data,
      input_data_size,
    ));
  }

  late final _TfLiteTensorCopyFromBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TfLiteTensor>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('TfLiteTensorCopyFromBuffer');
  late final _TfLiteTensorCopyFromBuffer =
      _TfLiteTensorCopyFromBufferPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteTensor>, ffi.Pointer<ffi.Void>, int)>();

  TfLiteStatus TfLiteTensorCopyToBuffer(
    ffi.Pointer<TfLiteTensor> output_tensor,
    ffi.Pointer<ffi.Void> output_data,
    int output_data_size,
  ) {
    return TfLiteStatus.fromValue(_TfLiteTensorCopyToBuffer(
      output_tensor,
      output_data,
      output_data_size,
    ));
  }

  late final _TfLiteTensorCopyToBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TfLiteTensor>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('TfLiteTensorCopyToBuffer');
  late final _TfLiteTensorCopyToBuffer =
      _TfLiteTensorCopyToBufferPtr.asFunction<
          int Function(
              ffi.Pointer<TfLiteTensor>, ffi.Pointer<ffi.Void>, int)>();

  void TfLiteSignatureRunnerDelete(
    ffi.Pointer<TfLiteSignatureRunner> signature_runner,
  ) {
    return _TfLiteSignatureRunnerDelete(
      signature_runner,
    );
  }

  late final _TfLiteSignatureRunnerDeletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<TfLiteSignatureRunner>)>>(
      'TfLiteSignatureRunnerDelete');
  late final _TfLiteSignatureRunnerDelete = _TfLiteSignatureRunnerDeletePtr
      .asFunction<void Function(ffi.Pointer<TfLiteSignatureRunner>)>();

  void simple_tokenizer(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> output,
    int max_len,
  ) {
    return _simple_tokenizer(
      text,
      output,
      max_len,
    );
  }

  late final _simple_tokenizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('simple_tokenizer');
  late final _simple_tokenizer = _simple_tokenizerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  ffi.Pointer<TfLiteInterpreter> load_model(
    ffi.Pointer<ffi.Char> model_path,
  ) {
    return _load_model(
      model_path,
    );
  }

  late final _load_modelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TfLiteInterpreter> Function(
              ffi.Pointer<ffi.Char>)>>('load_model');
  late final _load_model = _load_modelPtr.asFunction<
      ffi.Pointer<TfLiteInterpreter> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Float> get_embeddings(
    ffi.Pointer<TfLiteInterpreter> interpreter,
    ffi.Pointer<ffi.Char> input_text,
    int max_len,
  ) {
    return _get_embeddings(
      interpreter,
      input_text,
      max_len,
    );
  }

  late final _get_embeddingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<TfLiteInterpreter>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('get_embeddings');
  late final _get_embeddings = _get_embeddingsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(
          ffi.Pointer<TfLiteInterpreter>, ffi.Pointer<ffi.Char>, int)>();
}

typedef __u_char = ffi.UnsignedChar;
typedef Dart__u_char = int;
typedef __u_short = ffi.UnsignedShort;
typedef Dart__u_short = int;
typedef __u_int = ffi.UnsignedInt;
typedef Dart__u_int = int;
typedef __u_long = ffi.UnsignedLong;
typedef Dart__u_long = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.Long;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;
typedef __int_least8_t = __int8_t;
typedef __uint_least8_t = __uint8_t;
typedef __int_least16_t = __int16_t;
typedef __uint_least16_t = __uint16_t;
typedef __int_least32_t = __int32_t;
typedef __uint_least32_t = __uint32_t;
typedef __int_least64_t = __int64_t;
typedef __uint_least64_t = __uint64_t;
typedef __quad_t = ffi.Long;
typedef Dart__quad_t = int;
typedef __u_quad_t = ffi.UnsignedLong;
typedef Dart__u_quad_t = int;
typedef __intmax_t = ffi.Long;
typedef Dart__intmax_t = int;
typedef __uintmax_t = ffi.UnsignedLong;
typedef Dart__uintmax_t = int;
typedef __dev_t = ffi.UnsignedLong;
typedef Dart__dev_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;
typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __ino64_t = ffi.UnsignedLong;
typedef Dart__ino64_t = int;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;
typedef __nlink_t = ffi.UnsignedLong;
typedef Dart__nlink_t = int;
typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef __rlim_t = ffi.UnsignedLong;
typedef Dart__rlim_t = int;
typedef __rlim64_t = ffi.UnsignedLong;
typedef Dart__rlim64_t = int;
typedef __id_t = ffi.UnsignedInt;
typedef Dart__id_t = int;
typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;
typedef __suseconds64_t = ffi.Long;
typedef Dart__suseconds64_t = int;
typedef __daddr_t = ffi.Int;
typedef Dart__daddr_t = int;
typedef __key_t = ffi.Int;
typedef Dart__key_t = int;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef __timer_t = ffi.Pointer<ffi.Void>;
typedef __blksize_t = ffi.Long;
typedef Dart__blksize_t = int;
typedef __blkcnt_t = ffi.Long;
typedef Dart__blkcnt_t = int;
typedef __blkcnt64_t = ffi.Long;
typedef Dart__blkcnt64_t = int;
typedef __fsblkcnt_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt_t = int;
typedef __fsblkcnt64_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt64_t = int;
typedef __fsfilcnt_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt_t = int;
typedef __fsfilcnt64_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt64_t = int;
typedef __fsword_t = ffi.Long;
typedef Dart__fsword_t = int;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;
typedef __syscall_ulong_t = ffi.UnsignedLong;
typedef Dart__syscall_ulong_t = int;
typedef __loff_t = __off64_t;
typedef __caddr_t = ffi.Pointer<ffi.Char>;
typedef __intptr_t = ffi.Long;
typedef Dart__intptr_t = int;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;
typedef __sig_atomic_t = ffi.Int;
typedef Dart__sig_atomic_t = int;
typedef int_least8_t = __int_least8_t;
typedef int_least16_t = __int_least16_t;
typedef int_least32_t = __int_least32_t;
typedef int_least64_t = __int_least64_t;
typedef uint_least8_t = __uint_least8_t;
typedef uint_least16_t = __uint_least16_t;
typedef uint_least32_t = __uint_least32_t;
typedef uint_least64_t = __uint_least64_t;
typedef int_fast8_t = ffi.SignedChar;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Long;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Long;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Long;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.UnsignedChar;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.UnsignedLong;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.UnsignedLong;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.UnsignedLong;
typedef Dartuint_fast64_t = int;
typedef intmax_t = __intmax_t;
typedef uintmax_t = __uintmax_t;
typedef _Float32 = ffi.Float;
typedef Dart_Float32 = double;
typedef _Float64 = ffi.Double;
typedef Dart_Float64 = double;
typedef _Float32x = ffi.Double;
typedef Dart_Float32x = double;

final class div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

final class ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

final class lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef u_char = __u_char;
typedef u_short = __u_short;
typedef u_int = __u_int;
typedef u_long = __u_long;
typedef quad_t = __quad_t;
typedef u_quad_t = __u_quad_t;
typedef fsid_t = __fsid_t;
typedef loff_t = __loff_t;
typedef ino_t = __ino_t;
typedef dev_t = __dev_t;
typedef gid_t = __gid_t;
typedef mode_t = __mode_t;
typedef nlink_t = __nlink_t;
typedef uid_t = __uid_t;
typedef off_t = __off_t;
typedef pid_t = __pid_t;
typedef id_t = __id_t;
typedef ssize_t = __ssize_t;
typedef daddr_t = __daddr_t;
typedef caddr_t = __caddr_t;
typedef key_t = __key_t;
typedef clock_t = __clock_t;
typedef clockid_t = __clockid_t;
typedef time_t = __time_t;
typedef timer_t = __timer_t;
typedef ulong = ffi.UnsignedLong;
typedef Dartulong = int;
typedef ushort = ffi.UnsignedShort;
typedef Dartushort = int;
typedef uint = ffi.UnsignedInt;
typedef Dartuint = int;
typedef u_int8_t = __uint8_t;
typedef u_int16_t = __uint16_t;
typedef u_int32_t = __uint32_t;
typedef u_int64_t = __uint64_t;
typedef register_t = ffi.Long;
typedef Dartregister_t = int;

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

typedef sigset_t = __sigset_t;

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef suseconds_t = __suseconds_t;
typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef fd_mask = __fd_mask;
typedef blksize_t = __blksize_t;
typedef blkcnt_t = __blkcnt_t;
typedef fsblkcnt_t = __fsblkcnt_t;
typedef fsfilcnt_t = __fsfilcnt_t;

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

typedef __pthread_slist_t = __pthread_internal_slist;

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

typedef __tss_t = ffi.UnsignedInt;
typedef Dart__tss_t = int;
typedef __thrd_t = ffi.UnsignedLong;
typedef Dart__thrd_t = int;

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;
typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int()
  external int rand_type;

  @ffi.Int()
  external int rand_deg;

  @ffi.Int()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

final class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __old_x;

  @ffi.UnsignedShort()
  external int __c;

  @ffi.UnsignedShort()
  external int __init;

  @ffi.UnsignedLongLong()
  external int __a;
}

typedef __compar_fn_tFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart__compar_fn_tFunction = int Function(
    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef __compar_fn_t = ffi.Pointer<ffi.NativeFunction<__compar_fn_tFunction>>;

enum TfLiteBuiltinOperator {
  kTfLiteBuiltinAdd(0),
  kTfLiteBuiltinAveragePool2d(1),
  kTfLiteBuiltinConcatenation(2),
  kTfLiteBuiltinConv2d(3),
  kTfLiteBuiltinDepthwiseConv2d(4),
  kTfLiteBuiltinDepthToSpace(5),
  kTfLiteBuiltinDequantize(6),
  kTfLiteBuiltinEmbeddingLookup(7),
  kTfLiteBuiltinFloor(8),
  kTfLiteBuiltinFullyConnected(9),
  kTfLiteBuiltinHashtableLookup(10),
  kTfLiteBuiltinL2Normalization(11),
  kTfLiteBuiltinL2Pool2d(12),
  kTfLiteBuiltinLocalResponseNormalization(13),
  kTfLiteBuiltinLogistic(14),
  kTfLiteBuiltinLshProjection(15),
  kTfLiteBuiltinLstm(16),
  kTfLiteBuiltinMaxPool2d(17),
  kTfLiteBuiltinMul(18),
  kTfLiteBuiltinRelu(19),
  kTfLiteBuiltinReluN1To1(20),
  kTfLiteBuiltinRelu6(21),
  kTfLiteBuiltinReshape(22),
  kTfLiteBuiltinResizeBilinear(23),
  kTfLiteBuiltinRnn(24),
  kTfLiteBuiltinSoftmax(25),
  kTfLiteBuiltinSpaceToDepth(26),
  kTfLiteBuiltinSvdf(27),
  kTfLiteBuiltinTanh(28),
  kTfLiteBuiltinConcatEmbeddings(29),
  kTfLiteBuiltinSkipGram(30),
  kTfLiteBuiltinCall(31),
  kTfLiteBuiltinCustom(32),
  kTfLiteBuiltinEmbeddingLookupSparse(33),
  kTfLiteBuiltinPad(34),
  kTfLiteBuiltinUnidirectionalSequenceRnn(35),
  kTfLiteBuiltinGather(36),
  kTfLiteBuiltinBatchToSpaceNd(37),
  kTfLiteBuiltinSpaceToBatchNd(38),
  kTfLiteBuiltinTranspose(39),
  kTfLiteBuiltinMean(40),
  kTfLiteBuiltinSub(41),
  kTfLiteBuiltinDiv(42),
  kTfLiteBuiltinSqueeze(43),
  kTfLiteBuiltinUnidirectionalSequenceLstm(44),
  kTfLiteBuiltinStridedSlice(45),
  kTfLiteBuiltinBidirectionalSequenceRnn(46),
  kTfLiteBuiltinExp(47),
  kTfLiteBuiltinTopkV2(48),
  kTfLiteBuiltinSplit(49),
  kTfLiteBuiltinLogSoftmax(50),
  kTfLiteBuiltinDelegate(51),
  kTfLiteBuiltinBidirectionalSequenceLstm(52),
  kTfLiteBuiltinCast(53),
  kTfLiteBuiltinPrelu(54),
  kTfLiteBuiltinMaximum(55),
  kTfLiteBuiltinArgMax(56),
  kTfLiteBuiltinMinimum(57),
  kTfLiteBuiltinLess(58),
  kTfLiteBuiltinNeg(59),
  kTfLiteBuiltinPadv2(60),
  kTfLiteBuiltinGreater(61),
  kTfLiteBuiltinGreaterEqual(62),
  kTfLiteBuiltinLessEqual(63),
  kTfLiteBuiltinSelect(64),
  kTfLiteBuiltinSlice(65),
  kTfLiteBuiltinSin(66),
  kTfLiteBuiltinTransposeConv(67),
  kTfLiteBuiltinSparseToDense(68),
  kTfLiteBuiltinTile(69),
  kTfLiteBuiltinExpandDims(70),
  kTfLiteBuiltinEqual(71),
  kTfLiteBuiltinNotEqual(72),
  kTfLiteBuiltinLog(73),
  kTfLiteBuiltinSum(74),
  kTfLiteBuiltinSqrt(75),
  kTfLiteBuiltinRsqrt(76),
  kTfLiteBuiltinShape(77),
  kTfLiteBuiltinPow(78),
  kTfLiteBuiltinArgMin(79),
  kTfLiteBuiltinFakeQuant(80),
  kTfLiteBuiltinReduceProd(81),
  kTfLiteBuiltinReduceMax(82),
  kTfLiteBuiltinPack(83),
  kTfLiteBuiltinLogicalOr(84),
  kTfLiteBuiltinOneHot(85),
  kTfLiteBuiltinLogicalAnd(86),
  kTfLiteBuiltinLogicalNot(87),
  kTfLiteBuiltinUnpack(88),
  kTfLiteBuiltinReduceMin(89),
  kTfLiteBuiltinFloorDiv(90),
  kTfLiteBuiltinReduceAny(91),
  kTfLiteBuiltinSquare(92),
  kTfLiteBuiltinZerosLike(93),
  kTfLiteBuiltinFill(94),
  kTfLiteBuiltinFloorMod(95),
  kTfLiteBuiltinRange(96),
  kTfLiteBuiltinResizeNearestNeighbor(97),
  kTfLiteBuiltinLeakyRelu(98),
  kTfLiteBuiltinSquaredDifference(99),
  kTfLiteBuiltinMirrorPad(100),
  kTfLiteBuiltinAbs(101),
  kTfLiteBuiltinSplitV(102),
  kTfLiteBuiltinUnique(103),
  kTfLiteBuiltinCeil(104),
  kTfLiteBuiltinReverseV2(105),
  kTfLiteBuiltinAddN(106),
  kTfLiteBuiltinGatherNd(107),
  kTfLiteBuiltinCos(108),
  kTfLiteBuiltinWhere(109),
  kTfLiteBuiltinRank(110),
  kTfLiteBuiltinElu(111),
  kTfLiteBuiltinReverseSequence(112),
  kTfLiteBuiltinMatrixDiag(113),
  kTfLiteBuiltinQuantize(114),
  kTfLiteBuiltinMatrixSetDiag(115),
  kTfLiteBuiltinRound(116),
  kTfLiteBuiltinHardSwish(117),
  kTfLiteBuiltinIf(118),
  kTfLiteBuiltinWhile(119),
  kTfLiteBuiltinNonMaxSuppressionV4(120),
  kTfLiteBuiltinNonMaxSuppressionV5(121),
  kTfLiteBuiltinScatterNd(122),
  kTfLiteBuiltinSelectV2(123),
  kTfLiteBuiltinDensify(124),
  kTfLiteBuiltinSegmentSum(125),
  kTfLiteBuiltinBatchMatmul(126),
  kTfLiteBuiltinPlaceholderForGreaterOpCodes(127),
  kTfLiteBuiltinCumsum(128),
  kTfLiteBuiltinCallOnce(129),
  kTfLiteBuiltinBroadcastTo(130),
  kTfLiteBuiltinRfft2d(131),
  kTfLiteBuiltinConv3d(132),
  kTfLiteBuiltinImag(133),
  kTfLiteBuiltinReal(134),
  kTfLiteBuiltinComplexAbs(135),
  kTfLiteBuiltinHashtable(136),
  kTfLiteBuiltinHashtableFind(137),
  kTfLiteBuiltinHashtableImport(138),
  kTfLiteBuiltinHashtableSize(139),
  kTfLiteBuiltinReduceAll(140),
  kTfLiteBuiltinConv3dTranspose(141),
  kTfLiteBuiltinVarHandle(142),
  kTfLiteBuiltinReadVariable(143),
  kTfLiteBuiltinAssignVariable(144),
  kTfLiteBuiltinBroadcastArgs(145),
  kTfLiteBuiltinRandomStandardNormal(146),
  kTfLiteBuiltinBucketize(147),
  kTfLiteBuiltinRandomUniform(148),
  kTfLiteBuiltinMultinomial(149),
  kTfLiteBuiltinGelu(150),
  kTfLiteBuiltinDynamicUpdateSlice(151),
  kTfLiteBuiltinRelu0To1(152),
  kTfLiteBuiltinUnsortedSegmentProd(153),
  kTfLiteBuiltinUnsortedSegmentMax(154),
  kTfLiteBuiltinUnsortedSegmentSum(155),
  kTfLiteBuiltinAtan2(156),
  kTfLiteBuiltinUnsortedSegmentMin(157),
  kTfLiteBuiltinSign(158),
  kTfLiteBuiltinBitcast(159),
  kTfLiteBuiltinBitwiseXor(160),
  kTfLiteBuiltinRightShift(161),
  kTfLiteBuiltinStablehloLogistic(162),
  kTfLiteBuiltinStablehloAdd(163),
  kTfLiteBuiltinStablehloDivide(164),
  kTfLiteBuiltinStablehloMultiply(165),
  kTfLiteBuiltinStablehloMaximum(166),
  kTfLiteBuiltinStablehloReshape(167),
  kTfLiteBuiltinStablehloClamp(168),
  kTfLiteBuiltinStablehloConcatenate(169),
  kTfLiteBuiltinStablehloBroadcastInDim(170),
  kTfLiteBuiltinStablehloConvolution(171),
  kTfLiteBuiltinStablehloSlice(172),
  kTfLiteBuiltinStablehloCustomCall(173),
  kTfLiteBuiltinStablehloReduce(174),
  kTfLiteBuiltinStablehloAbs(175),
  kTfLiteBuiltinStablehloAnd(176),
  kTfLiteBuiltinStablehloCosine(177),
  kTfLiteBuiltinStablehloExponential(178),
  kTfLiteBuiltinStablehloFloor(179),
  kTfLiteBuiltinStablehloLog(180),
  kTfLiteBuiltinStablehloMinimum(181),
  kTfLiteBuiltinStablehloNegate(182),
  kTfLiteBuiltinStablehloOr(183),
  kTfLiteBuiltinStablehloPower(184),
  kTfLiteBuiltinStablehloRemainder(185),
  kTfLiteBuiltinStablehloRsqrt(186),
  kTfLiteBuiltinStablehloSelect(187),
  kTfLiteBuiltinStablehloSubtract(188),
  kTfLiteBuiltinStablehloTanh(189),
  kTfLiteBuiltinStablehloScatter(190),
  kTfLiteBuiltinStablehloCompare(191),
  kTfLiteBuiltinStablehloConvert(192),
  kTfLiteBuiltinStablehloDynamicSlice(193),
  kTfLiteBuiltinStablehloDynamicUpdateSlice(194),
  kTfLiteBuiltinStablehloPad(195),
  kTfLiteBuiltinStablehloIota(196),
  kTfLiteBuiltinStablehloDotGeneral(197),
  kTfLiteBuiltinStablehloReduceWindow(198),
  kTfLiteBuiltinStablehloSort(199),
  kTfLiteBuiltinStablehloWhile(200),
  kTfLiteBuiltinStablehloGather(201),
  kTfLiteBuiltinStablehloTranspose(202),
  kTfLiteBuiltinDilate(203),
  kTfLiteBuiltinStablehloRngBitGenerator(204),
  kTfLiteBuiltinReduceWindow(205),
  kTfLiteBuiltinStablehloComposite(206),
  kTfLiteBuiltinStablehloShiftLeft(207),
  kTfLiteBuiltinStablehloCbrt(208);

  final int value;
  const TfLiteBuiltinOperator(this.value);

  static TfLiteBuiltinOperator fromValue(int value) => switch (value) {
        0 => kTfLiteBuiltinAdd,
        1 => kTfLiteBuiltinAveragePool2d,
        2 => kTfLiteBuiltinConcatenation,
        3 => kTfLiteBuiltinConv2d,
        4 => kTfLiteBuiltinDepthwiseConv2d,
        5 => kTfLiteBuiltinDepthToSpace,
        6 => kTfLiteBuiltinDequantize,
        7 => kTfLiteBuiltinEmbeddingLookup,
        8 => kTfLiteBuiltinFloor,
        9 => kTfLiteBuiltinFullyConnected,
        10 => kTfLiteBuiltinHashtableLookup,
        11 => kTfLiteBuiltinL2Normalization,
        12 => kTfLiteBuiltinL2Pool2d,
        13 => kTfLiteBuiltinLocalResponseNormalization,
        14 => kTfLiteBuiltinLogistic,
        15 => kTfLiteBuiltinLshProjection,
        16 => kTfLiteBuiltinLstm,
        17 => kTfLiteBuiltinMaxPool2d,
        18 => kTfLiteBuiltinMul,
        19 => kTfLiteBuiltinRelu,
        20 => kTfLiteBuiltinReluN1To1,
        21 => kTfLiteBuiltinRelu6,
        22 => kTfLiteBuiltinReshape,
        23 => kTfLiteBuiltinResizeBilinear,
        24 => kTfLiteBuiltinRnn,
        25 => kTfLiteBuiltinSoftmax,
        26 => kTfLiteBuiltinSpaceToDepth,
        27 => kTfLiteBuiltinSvdf,
        28 => kTfLiteBuiltinTanh,
        29 => kTfLiteBuiltinConcatEmbeddings,
        30 => kTfLiteBuiltinSkipGram,
        31 => kTfLiteBuiltinCall,
        32 => kTfLiteBuiltinCustom,
        33 => kTfLiteBuiltinEmbeddingLookupSparse,
        34 => kTfLiteBuiltinPad,
        35 => kTfLiteBuiltinUnidirectionalSequenceRnn,
        36 => kTfLiteBuiltinGather,
        37 => kTfLiteBuiltinBatchToSpaceNd,
        38 => kTfLiteBuiltinSpaceToBatchNd,
        39 => kTfLiteBuiltinTranspose,
        40 => kTfLiteBuiltinMean,
        41 => kTfLiteBuiltinSub,
        42 => kTfLiteBuiltinDiv,
        43 => kTfLiteBuiltinSqueeze,
        44 => kTfLiteBuiltinUnidirectionalSequenceLstm,
        45 => kTfLiteBuiltinStridedSlice,
        46 => kTfLiteBuiltinBidirectionalSequenceRnn,
        47 => kTfLiteBuiltinExp,
        48 => kTfLiteBuiltinTopkV2,
        49 => kTfLiteBuiltinSplit,
        50 => kTfLiteBuiltinLogSoftmax,
        51 => kTfLiteBuiltinDelegate,
        52 => kTfLiteBuiltinBidirectionalSequenceLstm,
        53 => kTfLiteBuiltinCast,
        54 => kTfLiteBuiltinPrelu,
        55 => kTfLiteBuiltinMaximum,
        56 => kTfLiteBuiltinArgMax,
        57 => kTfLiteBuiltinMinimum,
        58 => kTfLiteBuiltinLess,
        59 => kTfLiteBuiltinNeg,
        60 => kTfLiteBuiltinPadv2,
        61 => kTfLiteBuiltinGreater,
        62 => kTfLiteBuiltinGreaterEqual,
        63 => kTfLiteBuiltinLessEqual,
        64 => kTfLiteBuiltinSelect,
        65 => kTfLiteBuiltinSlice,
        66 => kTfLiteBuiltinSin,
        67 => kTfLiteBuiltinTransposeConv,
        68 => kTfLiteBuiltinSparseToDense,
        69 => kTfLiteBuiltinTile,
        70 => kTfLiteBuiltinExpandDims,
        71 => kTfLiteBuiltinEqual,
        72 => kTfLiteBuiltinNotEqual,
        73 => kTfLiteBuiltinLog,
        74 => kTfLiteBuiltinSum,
        75 => kTfLiteBuiltinSqrt,
        76 => kTfLiteBuiltinRsqrt,
        77 => kTfLiteBuiltinShape,
        78 => kTfLiteBuiltinPow,
        79 => kTfLiteBuiltinArgMin,
        80 => kTfLiteBuiltinFakeQuant,
        81 => kTfLiteBuiltinReduceProd,
        82 => kTfLiteBuiltinReduceMax,
        83 => kTfLiteBuiltinPack,
        84 => kTfLiteBuiltinLogicalOr,
        85 => kTfLiteBuiltinOneHot,
        86 => kTfLiteBuiltinLogicalAnd,
        87 => kTfLiteBuiltinLogicalNot,
        88 => kTfLiteBuiltinUnpack,
        89 => kTfLiteBuiltinReduceMin,
        90 => kTfLiteBuiltinFloorDiv,
        91 => kTfLiteBuiltinReduceAny,
        92 => kTfLiteBuiltinSquare,
        93 => kTfLiteBuiltinZerosLike,
        94 => kTfLiteBuiltinFill,
        95 => kTfLiteBuiltinFloorMod,
        96 => kTfLiteBuiltinRange,
        97 => kTfLiteBuiltinResizeNearestNeighbor,
        98 => kTfLiteBuiltinLeakyRelu,
        99 => kTfLiteBuiltinSquaredDifference,
        100 => kTfLiteBuiltinMirrorPad,
        101 => kTfLiteBuiltinAbs,
        102 => kTfLiteBuiltinSplitV,
        103 => kTfLiteBuiltinUnique,
        104 => kTfLiteBuiltinCeil,
        105 => kTfLiteBuiltinReverseV2,
        106 => kTfLiteBuiltinAddN,
        107 => kTfLiteBuiltinGatherNd,
        108 => kTfLiteBuiltinCos,
        109 => kTfLiteBuiltinWhere,
        110 => kTfLiteBuiltinRank,
        111 => kTfLiteBuiltinElu,
        112 => kTfLiteBuiltinReverseSequence,
        113 => kTfLiteBuiltinMatrixDiag,
        114 => kTfLiteBuiltinQuantize,
        115 => kTfLiteBuiltinMatrixSetDiag,
        116 => kTfLiteBuiltinRound,
        117 => kTfLiteBuiltinHardSwish,
        118 => kTfLiteBuiltinIf,
        119 => kTfLiteBuiltinWhile,
        120 => kTfLiteBuiltinNonMaxSuppressionV4,
        121 => kTfLiteBuiltinNonMaxSuppressionV5,
        122 => kTfLiteBuiltinScatterNd,
        123 => kTfLiteBuiltinSelectV2,
        124 => kTfLiteBuiltinDensify,
        125 => kTfLiteBuiltinSegmentSum,
        126 => kTfLiteBuiltinBatchMatmul,
        127 => kTfLiteBuiltinPlaceholderForGreaterOpCodes,
        128 => kTfLiteBuiltinCumsum,
        129 => kTfLiteBuiltinCallOnce,
        130 => kTfLiteBuiltinBroadcastTo,
        131 => kTfLiteBuiltinRfft2d,
        132 => kTfLiteBuiltinConv3d,
        133 => kTfLiteBuiltinImag,
        134 => kTfLiteBuiltinReal,
        135 => kTfLiteBuiltinComplexAbs,
        136 => kTfLiteBuiltinHashtable,
        137 => kTfLiteBuiltinHashtableFind,
        138 => kTfLiteBuiltinHashtableImport,
        139 => kTfLiteBuiltinHashtableSize,
        140 => kTfLiteBuiltinReduceAll,
        141 => kTfLiteBuiltinConv3dTranspose,
        142 => kTfLiteBuiltinVarHandle,
        143 => kTfLiteBuiltinReadVariable,
        144 => kTfLiteBuiltinAssignVariable,
        145 => kTfLiteBuiltinBroadcastArgs,
        146 => kTfLiteBuiltinRandomStandardNormal,
        147 => kTfLiteBuiltinBucketize,
        148 => kTfLiteBuiltinRandomUniform,
        149 => kTfLiteBuiltinMultinomial,
        150 => kTfLiteBuiltinGelu,
        151 => kTfLiteBuiltinDynamicUpdateSlice,
        152 => kTfLiteBuiltinRelu0To1,
        153 => kTfLiteBuiltinUnsortedSegmentProd,
        154 => kTfLiteBuiltinUnsortedSegmentMax,
        155 => kTfLiteBuiltinUnsortedSegmentSum,
        156 => kTfLiteBuiltinAtan2,
        157 => kTfLiteBuiltinUnsortedSegmentMin,
        158 => kTfLiteBuiltinSign,
        159 => kTfLiteBuiltinBitcast,
        160 => kTfLiteBuiltinBitwiseXor,
        161 => kTfLiteBuiltinRightShift,
        162 => kTfLiteBuiltinStablehloLogistic,
        163 => kTfLiteBuiltinStablehloAdd,
        164 => kTfLiteBuiltinStablehloDivide,
        165 => kTfLiteBuiltinStablehloMultiply,
        166 => kTfLiteBuiltinStablehloMaximum,
        167 => kTfLiteBuiltinStablehloReshape,
        168 => kTfLiteBuiltinStablehloClamp,
        169 => kTfLiteBuiltinStablehloConcatenate,
        170 => kTfLiteBuiltinStablehloBroadcastInDim,
        171 => kTfLiteBuiltinStablehloConvolution,
        172 => kTfLiteBuiltinStablehloSlice,
        173 => kTfLiteBuiltinStablehloCustomCall,
        174 => kTfLiteBuiltinStablehloReduce,
        175 => kTfLiteBuiltinStablehloAbs,
        176 => kTfLiteBuiltinStablehloAnd,
        177 => kTfLiteBuiltinStablehloCosine,
        178 => kTfLiteBuiltinStablehloExponential,
        179 => kTfLiteBuiltinStablehloFloor,
        180 => kTfLiteBuiltinStablehloLog,
        181 => kTfLiteBuiltinStablehloMinimum,
        182 => kTfLiteBuiltinStablehloNegate,
        183 => kTfLiteBuiltinStablehloOr,
        184 => kTfLiteBuiltinStablehloPower,
        185 => kTfLiteBuiltinStablehloRemainder,
        186 => kTfLiteBuiltinStablehloRsqrt,
        187 => kTfLiteBuiltinStablehloSelect,
        188 => kTfLiteBuiltinStablehloSubtract,
        189 => kTfLiteBuiltinStablehloTanh,
        190 => kTfLiteBuiltinStablehloScatter,
        191 => kTfLiteBuiltinStablehloCompare,
        192 => kTfLiteBuiltinStablehloConvert,
        193 => kTfLiteBuiltinStablehloDynamicSlice,
        194 => kTfLiteBuiltinStablehloDynamicUpdateSlice,
        195 => kTfLiteBuiltinStablehloPad,
        196 => kTfLiteBuiltinStablehloIota,
        197 => kTfLiteBuiltinStablehloDotGeneral,
        198 => kTfLiteBuiltinStablehloReduceWindow,
        199 => kTfLiteBuiltinStablehloSort,
        200 => kTfLiteBuiltinStablehloWhile,
        201 => kTfLiteBuiltinStablehloGather,
        202 => kTfLiteBuiltinStablehloTranspose,
        203 => kTfLiteBuiltinDilate,
        204 => kTfLiteBuiltinStablehloRngBitGenerator,
        205 => kTfLiteBuiltinReduceWindow,
        206 => kTfLiteBuiltinStablehloComposite,
        207 => kTfLiteBuiltinStablehloShiftLeft,
        208 => kTfLiteBuiltinStablehloCbrt,
        _ => throw ArgumentError(
            "Unknown value for TfLiteBuiltinOperator: $value"),
      };
}

final class TfLiteAsyncKernel extends ffi.Opaque {}

final class TfLiteExecutionTask extends ffi.Opaque {}

enum TfLiteIoType {
  kTfLiteIoTypeUnknown(0),
  kTfLiteIoTypeInput(1),
  kTfLiteIoTypeOutput(2);

  final int value;
  const TfLiteIoType(this.value);

  static TfLiteIoType fromValue(int value) => switch (value) {
        0 => kTfLiteIoTypeUnknown,
        1 => kTfLiteIoTypeInput,
        2 => kTfLiteIoTypeOutput,
        _ => throw ArgumentError("Unknown value for TfLiteIoType: $value"),
      };
}

enum TfLiteStatus {
  kTfLiteOk(0),
  kTfLiteError(1),
  kTfLiteDelegateError(2),
  kTfLiteApplicationError(3),
  kTfLiteDelegateDataNotFound(4),
  kTfLiteDelegateDataWriteError(5),
  kTfLiteDelegateDataReadError(6),
  kTfLiteUnresolvedOps(7),
  kTfLiteCancelled(8);

  final int value;
  const TfLiteStatus(this.value);

  static TfLiteStatus fromValue(int value) => switch (value) {
        0 => kTfLiteOk,
        1 => kTfLiteError,
        2 => kTfLiteDelegateError,
        3 => kTfLiteApplicationError,
        4 => kTfLiteDelegateDataNotFound,
        5 => kTfLiteDelegateDataWriteError,
        6 => kTfLiteDelegateDataReadError,
        7 => kTfLiteUnresolvedOps,
        8 => kTfLiteCancelled,
        _ => throw ArgumentError("Unknown value for TfLiteStatus: $value"),
      };
}

enum TfLiteType {
  kTfLiteNoType(0),
  kTfLiteFloat32(1),
  kTfLiteInt32(2),
  kTfLiteUInt8(3),
  kTfLiteInt64(4),
  kTfLiteString(5),
  kTfLiteBool(6),
  kTfLiteInt16(7),
  kTfLiteComplex64(8),
  kTfLiteInt8(9),
  kTfLiteFloat16(10),
  kTfLiteFloat64(11),
  kTfLiteComplex128(12),
  kTfLiteUInt64(13),
  kTfLiteResource(14),
  kTfLiteVariant(15),
  kTfLiteUInt32(16),
  kTfLiteUInt16(17),
  kTfLiteInt4(18),
  kTfLiteBFloat16(19);

  final int value;
  const TfLiteType(this.value);

  static TfLiteType fromValue(int value) => switch (value) {
        0 => kTfLiteNoType,
        1 => kTfLiteFloat32,
        2 => kTfLiteInt32,
        3 => kTfLiteUInt8,
        4 => kTfLiteInt64,
        5 => kTfLiteString,
        6 => kTfLiteBool,
        7 => kTfLiteInt16,
        8 => kTfLiteComplex64,
        9 => kTfLiteInt8,
        10 => kTfLiteFloat16,
        11 => kTfLiteFloat64,
        12 => kTfLiteComplex128,
        13 => kTfLiteUInt64,
        14 => kTfLiteResource,
        15 => kTfLiteVariant,
        16 => kTfLiteUInt32,
        17 => kTfLiteUInt16,
        18 => kTfLiteInt4,
        19 => kTfLiteBFloat16,
        _ => throw ArgumentError("Unknown value for TfLiteType: $value"),
      };
}

final class TfLiteQuantizationParams extends ffi.Struct {
  @ffi.Float()
  external double scale;

  @ffi.Int32()
  external int zero_point;
}

final class TfLiteOpaqueContext extends ffi.Opaque {}

final class TfLiteOpaqueNode extends ffi.Opaque {}

final class TfLiteOpaqueTensor extends ffi.Opaque {}

final class TfLiteDelegate extends ffi.Opaque {}

final class TfLiteOpaqueDelegateStruct extends ffi.Opaque {}

typedef TfLiteOpaqueDelegate = TfLiteDelegate;

final class TfLiteOperator extends ffi.Opaque {}

final class TfLiteModel extends ffi.Opaque {}

final class TfLiteInterpreterOptions extends ffi.Opaque {}

final class TfLiteInterpreter extends ffi.Opaque {}

final class TfLiteTensor extends ffi.Opaque {}

final class TfLiteSignatureRunner extends ffi.Opaque {}

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef TfLiteRegistrationExternal = TfLiteOperator;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC23 = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_TIME_BITS64 = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C23_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 40;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;
